syntax = "proto3";
option java_package = "com.game.protoGen";
option go_package = "/protoGen";

import "ProtoCommon.proto";

// 运动状态
enum MotionState
{
  MOTION_NONE = 0;
  MOTION_RESET = 1;   // 重置
  MOTION_STANDBY = 2; // 待机
  MOTION_STANDBY_MOVE = 3; // 待机移动
  MOTION_WALK = 4;    // 走
  MOTION_RUN = 5;     // 跑
  MOTION_DASH = 6;    // 冲刺
  MOTION_CLIMB = 7;   // 攀爬
  MOTION_CLIMB_JUMP = 8;     // 攀爬跳跃
  MOTION_STANDBY_TO_CLIMB = 9;   // 待机到攀爬
  MOTION_FIGHT = 10;  // 战斗
  MOTION_JUMP = 11;   // 跳
  MOTION_DROP = 12;   // 掉落
  MOTION_FLY = 13;    // 飞行
  MOTION_SWIM_MOVE = 14;  // 游泳移动
  MOTION_SWIM_IDLE = 15;  // 游泳待机
  MOTION_SWIM_DASH = 16;  // 游泳猛冲
  MOTION_SWIM_JUMP = 17;  // 游泳跳跃
  MOTION_SLIP = 18;   // 下滑
  MOTION_GO_UPSTAIRS = 19;    // 上下梯子
  MOTION_FALL_ON_GROUND = 20; // 掉到地上
  MOTION_JUMP_UP_WALL_FOR_STANDBY = 21;    // 待机上墙
  MOTION_JUMP_OFF_WALL = 22;      // 跳下墙
  MOTION_POWERED_FLY = 23;    // 动力飞行
  MOTION_LADDER_IDLE = 24;    // 梯上待机
  MOTION_LADDER_MOVE = 25;    // 梯上移动
  MOTION_LADDER_SLIP = 26;    // 梯上下滑
  MOTION_STANDBY_TO_LADDER = 27;    // 待机到梯上
  MOTION_LADDER_TO_STANDBY = 28;    // 梯上到待机
  MOTION_DANGER_STANDBY = 29; // 危险区域中待机
  MOTION_DANGER_STANDBY_MOVE = 30;    // 危险区域中待机移动
  MOTION_DANGER_WALK = 31;    // 危险区域中走
  MOTION_DANGER_RUN = 32;     // 危险区域中跑
  MOTION_DANGER_DASH = 33;    // 危险区域中冲刺
  MOTION_CROUCH_IDLE = 34;    // 蹲下待机
  MOTION_CROUCH_MOVE = 35;    // 蹲下移动
  MOTION_CROUCH_ROLL = 36;    // 蹲下翻滚
  MOTION_NOTIFY = 37;         // 只通知位置时使用
  MOTION_LAND_SPEED = 38;     // 只通知落地速度时使用
  MOTION_MOVE_FAIL_ACK = 39;  // 移动失败确认
  MOTION_WATERFALL = 40;  // 瀑布滑落
  MOTION_DASH_BEFORE_SHAKE = 41;  // 冲刺前摇
  MOTION_SIT_IDLE = 42;   // 坐下
  MOTION_FORCE_SET_POS = 43;   // 被顶起
  MOTION_QUEST_FORCE_DRAG = 44;   // 任务强制拖拽
  MOTION_FOLLOW_ROUTE = 45;// 跟随指定路径

  MOTION_NUM = 46;		// 运动状态数量
}

// Entity移动信息
message EntityMoveInfo
{
  int32 entity_id = 1;       // 实体ID
  MotionInfo motion_info = 2; // 运动信息
}

// 运动信息
message MotionInfo
{
  Vector pos = 1;   // 位置
  Vector rot = 2;   // 旋转
  Vector speed = 3;  // 速度
  MotionState state = 4;  // 状态
//  repeated Vector params = 5;     // 参数
//  Vector ref_pos = 6;         // 参考位置
//  int32 ref_id = 7;
//  int32 scene_time = 8;
}

// 方位信息
message PlaceInfo
{
  Vector pos = 1;   // 位置
  Vector rot = 2;   // 旋转
}

// 场景上的实体类型
enum ProtEntityType
{
  PROT_ENTITY_NONE = 0;
  PROT_ENTITY_AVATAR = 1;     // 角色
  PROT_ENTITY_MONSTER = 2;    // 怪物
  PROT_ENTITY_NPC = 3;        // NPC
  PROT_ENTITY_GADGET = 4;     // 物件

  // 以下协议实体类型，客户端忽略
  PROT_ENTITY_REGION = 5;     // 区域
  PROT_ENTITY_WEAPON = 6;     // 武器
  PROT_ENTITY_WEATHER = 7;    // 天气
  PROT_ENTITY_SCENE = 8;      // 场景
  PROT_ENTITY_TEAM = 9;       // 队伍
  PROT_ENTITY_MASSIVE_ENTITY = 10;  // 水草等大量的物件
  PROT_ENTITY_MP_LEVEL = 11;       // 联机大Team关卡Entity
  PROT_ENTITY_PLAY_TEAM_ENTITY = 12; // 玩法队伍Entity
  PROT_ENTITY_EYE_POINT = 13; // 观察点
  PROT_ENTITY_MAX = 14;       // 最大值
}

enum EnterType
{
  ENTER_NONE = 0;
  ENTER_SELF = 1;             // 进入自己的场景
  ENTER_GOTO = 2;             // 跳点
  ENTER_JUMP = 3;             // 跳场景(自己的场景)
  ENTER_OTHER = 4;            // 进入别人的场景
  ENTER_BACK = 5;             // 返回自己的场景
  ENTER_DUNGEON = 6;          // 进入副本
  ENTER_DUNGEON_REPLAY = 7;   // 在副本中选择重玩
  ENTER_GOTO_BY_PORTAL = 8;   // 玩家在场景内通过传送门跳点(主要用于客户端)
}

enum EnterReason
{
  ENTER_REASON_NONE = 0;
  ENTER_REASON_LOGIN = 1;	// 登录时进入场景
  ENTER_REASON_DUNGEON_REPLAY = 11;	            // 重玩当前副本
  ENTER_REASON_DUNGEON_REVIVE_ON_WAYPOINT = 12;	// 地城中从最近路点复活
  ENTER_REASON_DUNGEON_ENTER = 13;	            // 进入地城
  ENTER_REASON_DUNGEON_QUIT = 14;	                // 离开地城
  ENTER_REASON_GM = 21;				// GM指令
  ENTER_REASON_QUEST_ROLLBACK = 31;	// 任务回滚
  ENTER_REASON_REVIVAL = 32;			// 复活
  ENTER_REASON_PERSONAL_SCENE = 41;	// 大世界、房间切换
  ENTER_REASON_TRANS_POINT = 42;		// 地图传送点
  ENTER_REASON_CLIENT_TRANSMIT = 43;	// 客户端发起的传送
  ENTER_REASON_FORCE_DRAG_BACK = 44;	// 多次超速之后客户端发起的传送
  ENTER_REASON_TEAM_KICK = 51;		// 联机被踢出其他人的世界
  ENTER_REASON_TEAM_JOIN = 52;		// 联机进入其他人的世界
  ENTER_REASON_TEAM_BACK = 53;		// 联机回到自己的世界
  ENTER_REASON_MUIP = 54;             // 来自muip的命令
  ENTER_REASON_DUNGEON_INVITE_ACCEPT = 55;             // 地城邀请接受
  ENTER_REASON_LUA = 56;              // 来自lua的调用
  ENTER_REASON_ACTIVITY_LOAD_TERRAIN = 57;        // 活动开启需要切换地形
  ENTER_REASON_HOST_FROM_SINGLE_TO_MP = 58;       // 主机从单机变为联机
  ENTER_REASON_MP_PLAY = 59;                      // 联机玩法主动把玩家传到出生点
  ENTER_REASON_ANCHOR_POINT = 60;                 // 使用传送锚点传送
  ENTER_REASON_LUA_SKIP_UI = 61;                  // 来自lua且跳过传送ui
  ENTER_REASON_RELOAD_TERRAIN = 62;   // 切换地形SceneTag
  ENTER_REASON_DRAFT_TRANSFER = 63;   // 征召传送
  ENTER_REASON_ENTER_HOME = 64; // 进入家园
  ENTER_REASON_EXIT_HOME = 65; // 离开家园
  ENTER_REASON_CHANGE_HOME_MODULE = 66; // 改变家园模组
  ENTER_REASON_GALLERY = 67;          // 小游戏传送
  ENTER_REASON_HOME_SCENE_JUMP = 68; // 家园室外、室内切换
  ENTER_REASON_HIDE_AND_SEEK = 69;    // 躲猫猫
}

enum VisionType
{
  VISION_NONE = 0;
  VISION_MEET = 1;                // 出现(进入视野)
  VISION_REBORN = 2;              // 重生
  VISION_REPLACE = 3;             // 主动更换
  VISION_WAYPOINT_REBORN = 4;     // 副本路点重生
  VISION_MISS = 5;                // 消失(离开视野)
  VISION_DIE = 6;                 // 死亡
  VISION_GATHER_ESCAPE = 7;       // 目前只用于环境小动物采集时逃走
  VISION_REFRESH = 8;             // group刷新导致物件消失(TODO...暂且不会发给客户端)
  VISION_TRANSPORT = 9;           // 在同一个场景内传送
  VISION_REPLACE_DIE = 10;        // 客户端需要区分死亡换人和主动换人
  VISION_REPLACE_NO_NOTIFY = 11;  // 无通知换人, 与队伍更新公用
  VISION_BORN = 12;               // entityAppear()的默认情况
  VISION_PICKUP = 13;             // 拾取
  VISION_REMOVE = 14;             // LD无声息移除entity
}

enum GroupVisionType{
  GVT_ALWAYS_SHOW = 0;
  GVT_DEFAULT = 1;
}

// 场景上的角色信息
message SceneAvatarInfo
{
  int64 uid = 1;
  int32 avatar_id = 2;   // AvatarID
  int64 guid = 3;        // 唯一ID
  int32 peer_id = 4;     // PeerID
}

// 怪物出生类型
enum MonsterBornType
{
  MONSTER_BORN_NONE = 0;
  MONSTER_BORN_DEFAULT = 1;   // 服务器指定所有坐标
  MONSTER_BORN_RANDOM = 2;    // 服务器指定x,z坐标，客户端计算y坐标
}

// 场景上的怪物信息
message SceneMonsterInfo
{
  int32 monster_id = 1;  // 怪物ID
  int32 group_id = 2;    // 组ID
  int32 config_id = 3;   // 配置ID
  int32 authority_peer_id = 5;   // 所属主机
  int32 owner_entity_id = 8;     // 所属的实体ID
  MonsterBornType born_type = 12; // 怪物出生类型
}

// 场景上的NPC信息
message SceneNpcInfo
{
  int32 npc_id = 1;
  int32 room_id = 2;
  int32 parent_quest_id = 3; // 关联的父任务id
  int32 block_id = 4; // 客户端需要
}

// 场景上的实体信息
message SceneEntityInfo
{
  ProtEntityType entity_type = 1; // 实体类型
  int32 entity_id = 2;		    // 实体ID(本场景唯一)
  string name = 3;			    // 名字(没有则显示配置中的)
  MotionInfo motion_info = 4;     // 运动信息
  int32 life_state = 7;          // 生命状态
  oneof entity
  {
    SceneAvatarInfo avatar = 10;     // 角色
    SceneMonsterInfo monster = 11;  // 怪物
    SceneNpcInfo npc = 12;          // NPC
  }

  int64 last_move_scene_time_ms = 17;  // 上次移动的场景时间
  repeated string tag_list = 22;        // tag列表
}

// 进场景流程:PlayerEnterSceneNtf->EnterSceneReadyReq->SceneInitFinishReq->EnterSceneDoneReq->PostEnterSceneReq
message PlayerEnterSceneNtf
{
  int32 scene_id = 1;                // 场景ID
  Vector pos = 2;                     // 位置
  int64 scene_begin_time = 3;        // 场景开始的时间(1970.1.1到现在的毫秒数)
  EnterType type = 4;                 // 进入类型
  int64 target_uid = 6;              // 场景所属的玩家ID
  int32 prev_scene_id = 9;           // 进入之前的场景ID
  Vector prev_pos = 10;               // 进入之前的位置
  int32 dungeon_id = 11;             // 进入大世界时为0
  int32 world_level = 12;            // 大世界等级, 如果是dungeon该字段无效
  int32 enter_scene_token = 13;      // 进场token，用于区分不同的进场流程
  bool is_first_login_enter_scene = 14; // 是否是第一次登录进场
  repeated int32 scene_tag_id_list = 15;  // 对应的tag
  bool is_skip_ui = 16;                  // 是否跳过ui跳转
  EnterReason enter_reason = 17;           // 上层的业务原因 EnterReason
}

// 客户端通知服务器可以跳场景了
message EnterSceneReadyReq
{
  int32 enter_scene_token = 1; // 进场token
}

// 跳场景准备响应，Req和Res之间会收到各种Disappear
message EnterSceneReadyRes
{
  int32 enter_scene_token = 2; // 进场token
}

// C->S场景初始化完成
message SceneInitFinishReq
{
  int32 enter_scene_token = 1; // 进场token
}

message SceneInitFinishRes
{
  int32 enter_scene_token = 1; // 进场token
}

// 客户端正式进入了场景
message EnterSceneDoneReq
{
  int32 enter_scene_token = 1; // 进场token
}

// 正式进入场景响应，Req和Res之间会收到EntityAppear，触发任务完成等
message EnterSceneDoneRes
{
  int32 enter_scene_token = 2; // 进场token
}

// 客户端进入场景后
message PostEnterSceneReq
{
  int32 enter_scene_token = 1; // 进场token
}

// 客户端进入场景之后
message PostEnterSceneRes
{
  int32 enter_scene_token = 2; // 进场token
}

// 退出当前场景
message LeaveSceneReq
{
}

message LeaveSceneRes
{
}

// 地图上的实体出现通知
message SceneEntityAppearNtf
{
  repeated SceneEntityInfo entity_list = 1;  // 实体列表
  VisionType appear_type = 2;                // 出现类型
  int64 param = 3;                          // 出现参数
}

// 地图上的实体消失通知
message SceneEntityDisappearNtf
{
  repeated int32 entity_list = 1;   // 实体ID列表
  VisionType disappear_type = 2;    // 消失类型
}

// 地图上的实体移动通知(S->C)
message SceneEntityMoveNtf
{
  uint32 entity_id = 1;   // 实体ID
  MotionInfo motion_info = 2;   // 运动信息
  int64 scene_time = 3;  // 地图时间
}

message ScenePlayerLocationNtf
{
  int32 scene_id = 1;
  repeated PlayerLocationInfo player_loc_list = 2;     // 所有玩家的位置信息
}

// 传送到目的点
message SceneTransToPointReq
{
  int32 scene_id = 1;    // 地图ID
  int32 point_id = 2;    // 目的传送点ID
}

message SceneTransToPointRes
{
  int32 scene_id = 2;    // 地图ID
  int32 point_id = 3;    // 目的传送点ID
}

// 地图上的实体跳点通知
message EntityJumpNtf
{
  // 跳点类型
  enum Type
  {
    NULL = 0;
    ACTIVE = 1;     // 主动跳点
    PASSIVE = 2;    // 被动跳点
  }

  int32 entity_id = 1;
  Type jump_type = 2;     // 跳点类型
  Vector pos = 3;         // 目的位置
  Vector rot = 4;         // 目的朝向
}

// 要创建的实体信息
message CreateEntityInfo
{
  oneof entity
  {
    int32 monster_id = 1;    // 怪物ID
    int32 npc_id = 2;        // NPC ID
    int32 gadget_id = 3;     // 物件ID
    int32 item_id = 4;       // 道具ID
  }
  int32 level = 5;             // 等级
  Vector pos = 6;               // 位置
  Vector rot = 7;               // 旋转
  int32 scene_id = 10;         // 场景ID
  int32 room_id = 11;          // 房间ID
  int32 client_unique_id = 12; // 客户端唯一ID
}

// 创建原因
enum CreateReason
{
  CREATE_NONE = 0;
  CREATE_QUEST = 1;
  CREATE_ENERGY = 2;
}

// 在地图上创建实体
message SceneCreateEntityReq
{
  CreateEntityInfo entity = 1;
  CreateReason reason = 2;    // 创建原因
  bool is_destroy_when_disconnect = 3; // 是否断线时销毁
}

message SceneCreateEntityRes
{
  int32 entity_id = 2;   // 创建的实体ID
  CreateEntityInfo entity = 3;
}

// 在地图上销毁实体
message SceneDestroyEntityReq
{
  int32 entity_id = 1;   // 删除的实体ID
}

message SceneDestroyEntityRes
{
  int32 entity_id = 2;   // 删除的实体ID
}

// 强制同步实体的状态，任务使用
message EntityForceSyncReq
{
  int32 entity_id = 1;       // 实体ID
  MotionInfo motion_info = 2;   // 运动信息
}

message EntityForceSyncRes
{
  int32 entity_id = 2;       // 实体ID
  MotionInfo fail_motion = 3;   // 失败时的运动信息
}

// 传送原因
enum TransmitReason
{
  TRANSMIT_NONE = 0;
  TRANSMIT_QUEST = 1;     // 任务
}

// 客户端传送请求
message ClientTransmitReq
{
  Vector pos = 1;     // 位置
  Vector rot = 2;     // 朝向
  TransmitReason reason = 3;  // 原因
  int32 scene_id = 4;
}

message ClientTransmitRes
{
  TransmitReason reason = 2;  // 原因
}

// 场景中玩家的信息
message ScenePlayerInfo
{
  int64 uid = 1;         // UID
  int32 peer_id = 2;     // PeerID
  string name = 3;        // 名字
  int32 scene_id = 4;    // 场景id
}

// 玩家切换Scene时的广播信息(S->C)
message ScenePlayerInfoNtf
{
  repeated ScenePlayerInfo player_info_list = 1;
}

// 玩家的位置信息
message PlayerLocationInfo
{
  int64 uid = 1;     // UID
  Vector pos = 2;     // 位置
  Vector rot = 3;     // 朝向
}

// 大世界中玩家的位置通知(S->C)
message WorldPlayerLocationNtf
{
  repeated PlayerLocationInfo player_loc_list = 1;     // 所有玩家的位置信息
}

// 通过PersonalSceneJumpPoint在大世界、房间场景中切换场景
message PersonalSceneJumpReq
{
  int32 point_id = 1;
}

message PersonalSceneJumpRes
{
  int32 dest_scene_id = 2;
  Vector dest_pos = 3;
}

// 角色进入场景时的数据
message AvatarEnterSceneInfo
{
  int64 avatar_guid = 1;         // 角色的唯一ID
  int32 avatar_entity_id = 2;    // 角色的实体ID(本场景唯一)
}

// 玩家进入场景的信息通知
message PlayerEnterSceneInfoNtf
{
  int32 cur_avatar_entity_id = 1;    // 当前角色的实体ID
  repeated AvatarEnterSceneInfo avatar_enter_info = 2;    // 角色进入场景的信息(场景跳点时不发)
  int32 enter_scene_token = 5; // 进场token
}

message JoinPlayerSceneReq
{
  int64 target_uid = 1;
}

message JoinPlayerSceneRes
{
}

message SceneKickPlayerReq
{
  int64 target_uid = 1;
}

message SceneKickPlayerRes
{
  int64 target_uid = 2;
}

message SceneKickPlayerNtf
{
  int64 kicker_uid = 1;      // 踢人者
  int64 target_uid = 2;      // 被踢者
}

// 回到我的大世界请求
message BackMyWorldReq
{
}

message BackMyWorldRes
{
}

// 场景时间同步
message SceneTimeNtf
{
  int32 scene_id = 1;
  bool is_paused = 2;
  int64 scene_time = 3; // 玩家个人时间
}

// 在EnterSceneReadyReq和EnterSceneReadyRes之间收到
message EnterScenePeerNtf
{
  int32 dest_scene_id = 1;   // 目标场景ID
  int32 peer_id = 2;         // 在目标场景中的peer_id
  int32 host_peer_id = 3;    // 目标场景的host_peer_id
  int32 enter_scene_token = 4; // 进场token
}

// 进入别人的世界失败提示
message JoinPlayerFailNtf
{
  int32 errcode = 1;
}

// 地图上的合包后的实体移动请求
message SceneEntitiesMoveReq
{
  repeated EntityMoveInfo entity_move_info_list = 1;
}

// Entity移动失败信息
message EntityMoveFailInfo
{
  int32 entity_id = 2;       // 实体ID
  MotionInfo fail_motion = 3; // 失败时的运动信息
  int32 scene_time = 4;      // 失败时的地图时间
  int32 reliable_seq = 5;    // 失败时的序列号
}

// 地图上的合包后的实体移动回复(只回复失败的移动)
message SceneEntitiesMoveRes
{
  repeated EntityMoveFailInfo entity_move_fail_info_list = 1;
}

// 地图上的合包后的实体移动通知(S->C)
message SceneEntitiesMoveNtf
{
  repeated EntityMoveInfo entity_move_info_list = 1;
}

message WorldDataNtf
{
}

// 玩家进入退出大世界时的广播通知S->C
message WorldPlayerInfoNtf
{
  repeated OnlinePlayerInfo player_info_list = 1; // 玩家在线数据
  repeated int64 player_uid_list = 2;            // 玩家uid列表, 用于确定1p, 2p等, 为0表示为空
}

message SceneDataNtf
{
}

message PlayerEyePointStateNtf
{
  bool is_use_eye_point = 1;          // 是否使用eye_point
  Vector eye_point_pos = 2;           // eye_point位置
  int32 region_entity_id = 3;   // 关联区域的entity_id
  int32 region_group_id = 4;    // 关联区域的组ID
  int32 region_config_id = 5;   // 关联区域的配置ID
  int32 region_shape = 6;       // 区域形状 data::RegionShape
  oneof region_size
  {
    float sphere_radius = 100;  // 球形区域半径
    Vector cubic_size = 101;    // 立方体区域长宽高
  }
}
